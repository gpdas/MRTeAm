digraph robot_controller {
#	rankdir=LR;
	size="8,12"

	# node [style=invis] START;
	node [shape=ellipse, label="idle"] idle;
	node [shape=ellipse, label="moving"] moving;
	node [shape=ellipse, label="resolve_collision"] resolve_collision;
	node [shape=ellipse, label="paused"] paused;
	node [shape=ellipse, label="bid"] bid;
	node [shape=ellipse, label="won"] won;
	node [shape=ellipse, label="choose_task"] choose_task;
	node [shape=ellipse, label="send_goal_to_nav_stack"] send_goal_to_nav_stack;
	node [shape=ellipse, label="task_success"] task_success;
	node [shape=ellipse, label="task_failure"] task_failure;
	node [shape=point] start;
	
	start        -> idle;
	idle         -> choose_task [label="have_tasks"];
	idle         -> idle [label="no_tasks"];

	# Make a bid
	idle         -> bid [label="task_announced"];
	bid          -> idle [label="bid_sent"];

	# Task won; add to agenda
	idle         -> won [label="task_won"];
	won          -> idle [label="task_added"];

	# Agenda is non-empty; choose a task and go to it.
	choose_task  -> send_goal_to_nav_stack [label="goal_chosen"];
	send_goal_to_nav_stack    -> moving [label="sent_to_nav_stack"];

	# Pause/resume
	moving      -> paused [label="pause, collision_detected"];
	paused       -> moving [label="resume"];
	
	# Collision resolution
	paused      -> resolve_collision [label="collision_detected"];
	resolve_collision -> moving [label="collision_resolved"];
		
	# Success/failure
	moving      -> task_success [label="goal_reached"];
	task_success -> idle [label="resume"];

	moving      -> task_failure [label="goal_cannot_be_reached"];
	task_failure -> idle [label="resume"];
	
}