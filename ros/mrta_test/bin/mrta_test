#!/usr/bin/env python

"""mrta_test

This script (and class) controls the task-bidding and goal-seeking behavior of a
robot.

Usage: robot_controller.py [robot_name] [goal-x-pos] [goal-y-pos]

 robot_name: the desired ROS node name of the robot. If none is given, then a
  random name is chosen.

The RobotController class uses a state machine to implement bidding and goal-
seeking behavior.

Eric Schneider <eric.schneider@liverpool.ac.uk>
"""

# Standard Python modules
from collections import defaultdict
import math
import pprint
import sys
import time
import uuid

# ROS modules
import rospy
import std_msgs.msg

import mrta
import mrta.msg

# We'll sleep 1/RATE seconds in every pass of the idle loop.
RATE = 100

pp = pprint.PrettyPrinter(indent=2)

def on_read(msg, topic):
    rospy.loginfo("{0}: {1}".format(topic, pp.pformat(msg)))

def init_subscribers(topics):
    rospy.loginfo('Initializing subscribers...')

    subs = []
    for topic in topics:
        sub = rospy.Subscriber(topic,
                               std_msgs.msg.String,
                               on_read,
                               callback_args=topic)
        rospy.loginfo("subscribed to {0}".format(topic))
    
        subs.append(sub)

    return subs

def init_publishers(topics):
    rospy.loginfo('Initializing publishers...')

    pubs = []
    for topic in topics:
        pub = rospy.Publisher(topic, std_msgs.msg.String, latch=True)
        rospy.loginfo("publishing to {0}".format(topic))

        pubs.append(pub)

    return pubs

def main(argv):

    # Get our "name"
#    master_name = rospy.get_param("master_name")
    master_name = argv[0]
    print "master_name: {0}".format(master_name)

    # Start the node
    node_name = "{0}_node".format(master_name)
    rospy.loginfo("Starting node '{0}'...".format(node_name))
    rospy.init_node(node_name)

    # Get a list of topics to publish
    pub_topics = rospy.get_param("~pub_topics")
    pubs = init_publishers(pub_topics)

    # Get a list of topics to subscribe to
    sub_topics = rospy.get_param("~sub_topics")
    subs = init_subscribers(sub_topics)

    rate = rospy.Rate(10)

    while not rospy.is_shutdown():

        for pub in pubs:
            message = std_msgs.msg.String(master_name)
            pub.publish(message)

            rate.sleep()

if __name__ == '__main__':

    try:
        argv = rospy.myargv(argv=sys.argv[1:])
        print "arguments: {0}".format(argv)

        main(argv)

        while not rospy.is_shutdown():
            rc.rate.sleep()

    except rospy.ROSInterruptException:
        pass

    print('######## mrta_test exiting ########')
