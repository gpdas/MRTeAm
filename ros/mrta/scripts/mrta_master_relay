#!/usr/bin/env python

# Python modules
from collections import defaultdict
import cPickle
import sys
import time
import traceback
import uuid
import yaml

# AMQP modules
import pika

# ROS modules
import nav_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import tf2_msgs.msg
import rospy
import threading

# mrta modules
import mrta
import mrta.msg

# We'll sleep 1/RATE seconds in every pass of the idle loop.
RATE = 10

# Base node name. We'll add a unique suffix to this.
NODE_BASE = 'mrta_master_relay'

# Use this to separate fields in a relayed message header
HEADER_DELIMITER = '####'

# Map of topics to message classes
topic_types = {'/robot_1/amcl_pose': geometry_msgs.msg.PoseWithCovarianceStamped,
               '/robot_1/base_pose_ground_truth': nav_msgs.msg.Odometry,
               '/robot_1/base_scan': sensor_msgs.msg.LaserScan,
               '/robot_1/cmd_vel': geometry_msgs.msg.Twist,
               '/robot_1/odom': nav_msgs.msg.Odometry,
               '/robot_2/amcl_pose': geometry_msgs.msg.PoseWithCovarianceStamped,
               '/robot_2/base_pose_ground_truth': nav_msgs.msg.Odometry,
               '/robot_2/base_scan': sensor_msgs.msg.LaserScan,
               '/robot_2/cmd_vel': geometry_msgs.msg.Twist,
               '/robot_2/odom': nav_msgs.msg.Odometry,
               '/robot_3/amcl_pose': geometry_msgs.msg.PoseWithCovarianceStamped,
               '/robot_3/base_pose_ground_truth': nav_msgs.msg.Odometry,
               '/robot_3/base_scan': sensor_msgs.msg.LaserScan,
               '/robot_3/cmd_vel': geometry_msgs.msg.Twist,
               '/robot_3/odom': nav_msgs.msg.Odometry,
               '/experiment': mrta.msg.ExperimentEvent,
               '/tasks/announce': mrta.msg.AnnounceSensorSweep,
               '/tasks/bid': mrta.msg.TaskBid,
               '/tasks/award': mrta.msg.TaskAward,
               '/tasks/status': mrta.msg.TaskStatus,
               '/tasks/new': mrta.msg.SensorSweepTask,
               '/tf': tf2_msgs.msg.TFMessage,
               '/debug': mrta.msg.Debug}

robot_names = ['robot_1', 'robot_2', 'robot_3']


class MRTeAmRelay:

    def __init__(self):
        """ Start the show """

        # Exchange name. All relayed messages are published to/consumed from this
        self.exchange_name = 'mrta_bridge'
        # queue_name = None
        self.queue_name = 'mrta_bridge_queue'

        self.connection = None
        self.channel = None
        self.channel_lock = threading.Lock()

        # topic (string) => rospy.Publisher object
        self.publishers = defaultdict(str)

        # Generate a unique prefix for our node name
        unique_prefix = str(uuid.uuid1()).replace('-', '').replace('_', '')
        self.node_name = "{0}_{1}".format(NODE_BASE, unique_prefix)

        # queue_name = "queue_{0}".format(unique_prefix)

        # Topics to ignore completely (blacklist)
        self.ignore_topics = []

        # Substrings of topics to ignore receiving
        self.receive_ignore_strings = []

        # Substrings of topics to ignore sending
        self.send_ignore_strings = []

        try:
            # Start the node
            print('######## {0} starting ########'.format(self.node_name))
            rospy.loginfo("Starting node '{0}'...".format(self.node_name))
            rospy.init_node(self.node_name)

            # Set our rate
            rate = rospy.Rate(RATE)

            # RabbitMQ server hostname
            bridge_host = rospy.get_param('~master_bridge_host', 'localhost')

            # RabbitMQ server port
            bridge_port = rospy.get_param('~master_bridge_port', '5672')

            # Topics to relay
            # relay_topics = rospy.get_param('~topics', [])

            # Topics to send to the bridge/other masters
            self.send_topics = rospy.get_param('~send_topics', [])

            # Topics to receive from the bridge/other masters
            self.receive_topics = rospy.get_param('~receive_topics', [])

            # Special case when this node relays topics for a robot. We never
            # want to receive messages from the bridge for a topic with a namespace
            # that contains the robot's name, or we'd create a publish loop.
            self.robot_name = rospy.get_param('~robot_name', '')

            print "bridge: {0}:{1}".format(bridge_host, bridge_port)
            # print "relay topics: {0}".format(relay_topics)
            print "send topics: {0}".format(self.send_topics)
            print "receive topics: {0}".format(self.receive_topics)

            # Subscribe to local topics and republish them to the bridge
            self.init_subscribers(self.send_topics)

            # Receive messages from the bridge and republish them locally
            self.init_publishers(self.receive_topics)

            # Connect to the bridge
            self.connection = self.connect(bridge_host, bridge_port)

            # channel.basic_consume(on_bridge_message,
            #                       queue=queue_name,
            #                       no_ack=True)

            self.connection.ioloop.start()

            # channel.start_consuming()

            # while not rospy.is_shutdown():
            #     rate.sleep()

        # except rospy.ROSInterruptException:
        except:
            exc_info = sys.exc_info()
            rospy.loginfo("General error: {0}, {1}".format(exc_info[0], exc_info[1]))
            traceback.print_exc()

        finally:
            # if channel:
            #     channel.stop_consuming()
            print "Disconnecting from bridge..."
            self.disconnect()

        print('######## {0} exiting ########'.format(self.node_name))

    def start_consuming(self):
        self.channel.basic_consume(self.on_bridge_message, queue=self.queue_name)

    def on_bindok(self, unused_frame):
        print "Queue bound"
        self.start_consuming()

    def on_queue_declareok(self, frame):
        print "Queue declared: {0}".format(frame)
        print "Binding {0} to {1}".format(self.queue_name, self.exchange_name)

        self.channel.queue_bind(self.on_bindok,
                                queue=self.queue_name,
                                exchange=self.exchange_name)

    def setup_queue(self):
        print "Declaring {0}".format(self.queue_name)
        self.channel.queue_declare(self.on_queue_declareok,
                                   self.queue_name,
                                   exclusive=False,
                                   passive=True)

    def on_exchange_declareok(self, unused_frame):
        print "Exchange declared"
        self.setup_queue()

    def setup_exchange(self):
        self.channel.exchange_declare(self.on_exchange_declareok,
                                      exchange=self.exchange_name,
                                      type='fanout',
                                      passive=True)

    def on_channel_open(self, new_channel):
        print "Channel open"

        self.channel = new_channel
        self.setup_exchange()

        # result = self.channel.queue_declare(exclusive=True, callback=self.on_queue_declared)
        # print "result: {0}".format(result)
        # # queue_name = result.method.queue
        #
        # self.channel.queue_bind(callback=None,
        #                         queue=self.queue_name,
        #                         exchange=self.exchange_name)

    def on_connection_open(self, new_connection):
        print "Connection open"
        new_connection.channel(self.on_channel_open)

    def connect(self, host, port):
        """ Connect to the bridge (RabbitMQ) """

        # A blocking connection
        # connection = pika.BlockingConnection(pika.ConnectionParameters(host=host, port=port))

        # A non-blocking connection
        return pika.SelectConnection(parameters=pika.ConnectionParameters(host=host, port=port),
                                     on_open_callback=self.on_connection_open)

        # channel = connection.channel()
        # channel.exchange_declare(exchange=exchange_name, type='fanout')
        #
        # result = channel.queue_declare(exclusive=True)
        # queue_name = result.method.queue
        #
        # channel.queue_bind(exchange=exchange_name,
        #                    queue=queue_name)

    def disconnect(self):
        """ Disconnect from the bridge (RabbitMQ) """
        self.connection.close()

    def publish_to_bridge(self, message, topic):
        """ Publish a message to the bridge (RabbitMQ) """

        # The message we relay is composed of the following:
        # <node_name><HEADER_DELIMITER><topic><HEADER_DELIMITER><message>

        if not self.channel or not self.channel.is_open:
            print "publish_to_bridge(): Channel not open"
            return

        # Ignore messages on topics we don't want to send
        if topic not in self.send_topics:
            return

        pickled_msg = cPickle.dumps(message)

        relay_message = "{0}{1}{2}{3}{4}".format(self.node_name, HEADER_DELIMITER, topic, HEADER_DELIMITER, pickled_msg)

        # rospy.loginfo("Publishing {0} to master bridge on topic {1}".format(message, topic))

        try:
            # self.channel_lock.acquire()

            self.channel.basic_publish(exchange=self.exchange_name,
                                       routing_key='',
                                       body=relay_message)

            # self.channel_lock.release()
        except:
            exc_info = sys.exc_info()
            rospy.loginfo("Error on publishing message to bridge: {0}, {1}".format(exc_info[0], exc_info[1]))
            traceback.print_exc()

    def init_subscribers(self, send_topics):
        """ Initialize subscriber callbacks for local messages (from roscore) """

        # For each topic we want to relay, call publish_to_bridge whenever we
        # receive a local message on that topic
        for send_topic in send_topics:

            # Don't republish other robots' poses to the bridge
            if self.robot_name and 'amcl_pose' in send_topic and self.robot_name not in send_topic:
                continue

            print "Subscribing to {0}".format(send_topic)
            rospy.Subscriber(name=send_topic,
                             data_class=topic_types[send_topic],
                             callback=self.publish_to_bridge,
                             callback_args=send_topic)

    def init_publishers(self, receive_topics):
        """ Initialize publisher objects for local messages (to roscore) """

        for receive_topic in receive_topics:

            # Don't receive and republish our own poses
            if self.robot_name and receive_topic == '/{0}/amcl_pose'.format(self.robot_name):
                continue

            self.publishers[receive_topic] = rospy.Publisher(receive_topic,
                                                             topic_types[receive_topic],
                                                             queue_size=5)

    def on_bridge_message(self, channel, method_frame, header_frame, body):
        """ Called when a message from the bridge (RabbitMQ) is received ("consumed") """

        # print "Message received from bridge."

        try:
            (sender, topic, pickled_msg) = body.split(HEADER_DELIMITER)

            # print "sender: {0}, topic: {1}".format(sender, topic)

            # We don't want to loop if the message was originally sent by us
            # if sender == self.node_name:
            #     return

            # Ignore messages on topics we don't want to receive
            if topic not in self.receive_topics:
                return

            # Also ignore messages about us
            if self.robot_name and self.robot_name in topic:
                return

            print "Message from {0} on topic {1}".format(sender, topic)

            # Unpickle the message
            message = cPickle.loads(pickled_msg)

            # print message

            # Get a handle to a local (ROS) publisher
            publisher = self.publishers[topic]
            publisher.publish(message)

        except Exception:
            exc_info = sys.exc_info()
            rospy.loginfo("Error on receiving message from bridge: {0}, {1}".format(exc_info[0], exc_info[1]))
            traceback.print_exc()


if __name__ == '__main__':
    argv = rospy.myargv(argv=sys.argv[1:])
    # print "arguments: {0}".format(argv)
    relay = MRTeAmRelay()
    # print("rc final state: {0}".format(rc.fsm.current))
