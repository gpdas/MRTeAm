<launch>
    <param name="/use_sim_time" value="true"/>

    <arg name="nogui_flag" default=""/>
    <arg name="reallocate" default="false"/>

    <!--  <arg name="dynamic_mechanism" default="false" /> -->

    <arg name="dummy_robot_name" default="robot_0"/>

    <arg name="classifier_name" default="clf_execution_phase_time_random_forest"/>

    <!--  <node name="rviz" pkg="rviz" type="rviz" /> -->

    <!-- Map server -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(find mrta)/config/maps/$(arg map_file)"
          respawn="false"/>

    <!-- Stage -->
    <node pkg="stage_ros" type="stageros" name="stageros"
          args="$(arg nogui_flag) $(find mrta)/config/stage/$(arg world_file)" required="true" respawn="false">
        <param name="base_watchdog_timeout" value="0.2"/>
    </node>

    <!-- BEGIN Dummy Robot -->
    <group ns="$(arg dummy_robot_name)">
        <param name="tf_prefix" value="$(arg dummy_robot_name)"/>

        <node pkg="move_base" type="move_base" name="move_base_node" output="screen" respawn="false" required="true">
            <remap from="map" to="/map"/>

            <param name="controller_frequency" value="0.1"/>
            <param name="shutdown_costmaps" value="false"/>

            <!--<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />-->
            <param name="base_local_planner" value="mrta_dwa_local_planner/MRTADWAPlannerROS"/>

            <param name="base_global_planner" value="global_planner/GlobalPlanner"/>

            <param name="planner_frequency" value="0"/>

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load"/>

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load" ns="global_costmap"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load" ns="local_costmap"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/local_costmap_params.yaml"
                      command="load"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_costmap_params.yaml"
                      command="load"/>

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/mrta_dwa_local_planner_params.yaml"
                      command="load"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_planner_params.yaml"
                      command="load" ns="GlobalPlanner"/>

        </node>

        <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen">
            <param name="odom_frame_id" value="$(arg dummy_robot_name)/odom"/>
            <param name="base_frame_id" value="$(arg dummy_robot_name)/base_link"/>
            <param name="publish_frequency" value="5.0"/>
        </node>
    </group>
    <!-- END Dummy Robot -->

    <!-- BEGIN ROBOT 1 -->
    <group ns="robot_1">
        <param name="tf_prefix" value="robot_1"/>

        <node pkg="move_base" type="move_base" name="move_base_node" output="screen" respawn="false" required="true">
            <remap from="map" to="/map"/>

            <param name="controller_frequency" value="10.0"/>
            <param name="shutdown_costmaps" value="false"/>

            <!--<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />-->
            <param name="base_local_planner" value="mrta_dwa_local_planner/MRTADWAPlannerROS"/>

            <!--
            <param name="hrteam_map_filename" value="$(find hrteam_planner)/map-11jan12.conf" />
            <param name="base_global_planner" value="hrteam_planner/HRTeamPlanner" />
            -->

            <param name="base_global_planner" value="global_planner/GlobalPlanner"/>

            <!--<rosparam param="clearing_rotation_allowed">false</rosparam>-->

            <!-- The rate (in Hz) at which to run the global planning loop. -->
            <param name="planner_frequency" value="0.5"/>

            <!-- How long the planner will wait (in seconds) in an attempt to find a valid plan
                 before space-clearing operations are performed. -->
            <param name="planner_patience" value="2.0"/>

            <!-- How long the controller will wait (in seconds) without receiving a valid control
                 before space-clearing operations are performed. -->
            <param name="controller_patience" value="2.0"/>

            <!-- The distance away from the robot (in meters) at which obstacles will be cleared
                 from the costmap when attampting to clear space in the map. -->
            <param name="conservative_reset_dist" value="9.0"/>

            <rosparam param="recovery_behaviors">
                [
                {name: conservative_clear, type: clear_costmap_recovery/ClearCostmapRecovery},
                <!--{name: rotate_recovery, type: rotate_recovery/RotateRecovery},-->
                {name: backup_recovery, type: backup_recovery/BackupRecovery},
                {name: aggressive_clear, type: clear_costmap_recovery/ClearCostmapRecovery}
                ]
            </rosparam>

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load"/>

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load" ns="global_costmap"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load" ns="local_costmap"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/local_costmap_params.yaml"
                      command="load"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_costmap_params.yaml"
                      command="load"/>

            <!--      <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/base_local_planner_params.yaml" command="load" /> -->

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/mrta_dwa_local_planner_params.yaml"
                      command="load"/>

            <param name="MRTADWAPlannerROS/global_frame_id" value="robot_1/odom" />

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_planner_params.yaml"
                      command="load" ns="GlobalPlanner"/>

        </node>

        <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen">
            <param name="odom_frame_id" value="robot_1/odom"/>
            <param name="base_frame_id" value="robot_1/base_link"/>
            <param name="publish_frequency" value="5.0"/>
        </node>

        <!--
        Arguments to mrta_robot_controller:
          robot_name    - e.g. "robot_1"
          reallocate    - True/False: are we doing task reallocation?
          is_turtlebot  - True/False
        -->
        <node name="mrta_robot_controller" pkg="mrta_robot_controller" type="mrta_robot_controller" respawn="false"
              required="true" output="screen">
            <param name="robot_name" type="str" value="robot_1"/>
            <param name="reallocate" type="bool" value="$(arg reallocate)"/>
            <param name="is_turtlebot" type="bool" value="False"/>
        </node>

    </group>
    <!-- END ROBOT 1 -->

    <!-- BEGIN ROBOT 2 -->
    <group ns="robot_2">
        <param name="tf_prefix" value="robot_2"/>

        <node pkg="move_base" type="move_base" name="move_base_node" output="screen" respawn="false" required="true">
            <remap from="map" to="/map"/>

            <param name="controller_frequency" value="10.0"/>
            <param name="shutdown_costmaps" value="false"/>

            <!--<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />-->
            <param name="base_local_planner" value="mrta_dwa_local_planner/MRTADWAPlannerROS"/>

            <!--
            <param name="hrteam_map_filename" value="$(find hrteam_planner)/map-11jan12.conf" />
            <param name="base_global_planner" value="hrteam_planner/HRTeamPlanner" />
            -->

            <param name="base_global_planner" value="global_planner/GlobalPlanner"/>

            <!--<rosparam param="clearing_rotation_allowed">false</rosparam>-->

            <!-- The rate (in Hz) at which to run the global planning loop. -->
            <param name="planner_frequency" value="0.5"/>

            <!-- How long the planner will wait (in seconds) in an attempt to find a valid plan
                 before space-clearing operations are performed. -->
            <param name="planner_patience" value="2.0"/>

            <!-- How long the controller will wait (in seconds) without receiving a valid control
                 before space-clearing operations are performed. -->
            <param name="controller_patience" value="2.0"/>

            <!-- The distance away from the robot (in meters) at which obstacles will be cleated
                 from the costmap when attampting to clear space in the map. -->
            <param name="conservative_reset_dist" value="9.0"/>

            <rosparam param="recovery_behaviors">
                [
                {name: conservative_clear, type: clear_costmap_recovery/ClearCostmapRecovery},
                <!--{name: rotate_recovery, type: rotate_recovery/RotateRecovery},-->
                {name: backup_recovery, type: backup_recovery/BackupRecovery},
                {name: aggressive_clear, type: clear_costmap_recovery/ClearCostmapRecovery}
                ]
            </rosparam>

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load"/>

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load" ns="global_costmap"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load" ns="local_costmap"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/local_costmap_params.yaml"
                      command="load"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_costmap_params.yaml"
                      command="load"/>

            <!--<rosparam file="$(find mrta_robot_controller)/param/move_base_generic/base_local_planner_params.yaml" command="load" />-->

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/mrta_dwa_local_planner_params.yaml"
                      command="load"/>

            <param name="MRTADWAPlannerROS/global_frame_id" value="robot_2/odom" />

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_planner_params.yaml"
                      command="load" ns="GlobalPlanner"/>

        </node>

        <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen">
            <param name="odom_frame_id" value="robot_2/odom"/>
            <param name="base_frame_id" value="robot_2/base_link"/>
            <param name="publish_frequency" value="5.0"/>
        </node>

        <!--
        Arguments to mrta_robot_controller:
          robot_name    - e.g. "robot_1"
          reallocate    - True/False: are we doing task reallocation?
          is_turtlebot  - True/False
        -->
        <node name="mrta_robot_controller" pkg="mrta_robot_controller" type="mrta_robot_controller" respawn="false"
              required="true" output="screen">
            <param name="robot_name" type="str" value="robot_2"/>
            <param name="reallocate" type="bool" value="$(arg reallocate)"/>
            <param name="is_turtlebot" type="bool" value="False"/>
        </node>

    </group>
    <!-- END ROBOT 2 -->

    <!-- BEGIN ROBOT 3 -->
    <group ns="robot_3">
        <param name="tf_prefix" value="robot_3"/>

        <node pkg="move_base" type="move_base" name="move_base_node" output="screen" respawn="false" required="true">
            <remap from="map" to="/map"/>

            <param name="controller_frequency" value="10.0"/>
            <param name="shutdown_costmaps" value="false"/>

            <!--<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />-->
            <param name="base_local_planner" value="mrta_dwa_local_planner/MRTADWAPlannerROS"/>

            <!--
            <param name="hrteam_map_filename" value="$(find hrteam_planner)/map-11jan12.conf" />
            <param name="base_global_planner" value="hrteam_planner/HRTeamPlanner" />
            -->

            <param name="base_global_planner" value="global_planner/GlobalPlanner"/>

            <!--<rosparam param="clearing_rotation_allowed">false</rosparam>-->

            <!-- The rate (in Hz) at which to run the global planning loop. -->
            <param name="planner_frequency" value="0.5"/>

            <!-- How long the planner will wait (in seconds) in an attempt to find a valid plan
                 before space-clearing operations are performed. -->
            <param name="planner_patience" value="2.0"/>

            <!-- How long the controller will wait (in seconds) without receiving a valid control
                 before space-clearing operations are performed. -->
            <param name="controller_patience" value="2.0"/>

            <!-- The distance away from the robot (in meters) at which obstacles will be cleated
                 from the costmap when attampting to clear space in the map. -->
            <param name="conservative_reset_dist" value="9.0"/>

            <rosparam param="recovery_behaviors">
                [
                {name: conservative_clear, type: clear_costmap_recovery/ClearCostmapRecovery},
                <!--{name: rotate_recovery, type: rotate_recovery/RotateRecovery},-->
                {name: backup_recovery, type: backup_recovery/BackupRecovery},
                {name: aggressive_clear, type: clear_costmap_recovery/ClearCostmapRecovery}
                ]
            </rosparam>

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load"/>

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load" ns="global_costmap"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml"
                      command="load" ns="local_costmap"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/local_costmap_params.yaml"
                      command="load"/>
            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_costmap_params.yaml"
                      command="load"/>

            <!--<rosparam file="$(find mrta_robot_controller)/param/move_base_generic/base_local_planner_params.yaml" command="load" />-->

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/mrta_dwa_local_planner_params.yaml"
                      command="load"/>

            <param name="MRTADWAPlannerROS/global_frame_id" value="robot_3/odom" />

            <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_planner_params.yaml"
                      command="load" ns="GlobalPlanner"/>

        </node>

        <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen">
            <param name="odom_frame_id" value="robot_3/odom"/>
            <param name="base_frame_id" value="robot_3/base_link"/>
            <param name="publish_frequency" value="5.0"/>
        </node>

        <!--
        Arguments to mrta_robot_controller:
          robot_name    - e.g. "robot_1"
          reallocate    - True/False: are we doing task reallocation?
          is_turtlebot  - True/False
        -->
        <node name="mrta_robot_controller" pkg="mrta_robot_controller" type="mrta_robot_controller" respawn="false"
              required="true" output="screen">
            <param name="robot_name" type="str" value="robot_3"/>
            <param name="reallocate" type="bool" value="$(arg reallocate)"/>
            <param name="is_turtlebot" type="bool" value="False"/>
        </node>

    </group>
    <!-- END ROBOT 3 -->

    <node name="mrta_auctioneer" pkg="mrta_auctioneer" type="mrta_auctioneer" required="true" output="screen">
        <!--<param name="task_file" value="$(find mrta_auctioneer)/task_files/$(arg task_file)"/>-->
        <param name="scenario_id" value="$(arg scenario_id)"/>
        <param name="mechanism" value="$(arg mechanism)"/>
        <param name="reallocate" value="$(arg reallocate)"/>
        <!--    <param name="dynamic_mechanism" value="$(arg dynamic_mechanism)" /> -->
        <param name="dummy_robot_name" value="$(arg dummy_robot_name)"/>
        <param name="classifier_name" value="$(arg classifier_name)"/>
    </node>

</launch>
