<launch>
  <arg name="robot_name" default="robot_2" />

  <param name="/use_sim_time" value="true"/>

  <!-- Map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find mrta)/config/maps/$(arg map_file) 0.01" />

  <!-- BEGIN ROBOT -->
  <group ns="$(arg robot_name)">
    <param name="tf_prefix" value="$(arg robot_name)" />

    <node pkg="move_base" type="move_base" name="move_base_node" output="screen" respawn="false" required="true">
      <remap from="map" to="/map" />

      <param name="controller_frequency" value="10.0" />

      <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />

      <!--
      <param name="hrteam_map_filename" value="$(find hrteam_planner)/map-11jan12.conf" />
      <param name="base_global_planner" value="hrteam_planner/HRTeamPlanner" />
      -->

      <param name="base_global_planner" value="global_planner/GlobalPlanner" />

      <!--<rosparam param="clearing_rotation_allowed">false</rosparam>-->

      <!-- The rate (in Hz) at which to run the global planning loop. -->
      <param name="planner_frequency" value="0.2" />

      <!-- How long the planner will wait (in seconds) in an attempt to find a valid plan
           before space-clearing operations are performed. -->
      <param name="planner_patience" value="2.0"/>

      <!-- How long the controller will wait (in seconds) without receiving a valid control
           before space-clearing operations are performed. -->
      <param name="controller_patience" value="10.0"/>

      <!-- The distance away from the robot (in meters) at which obstacles will be cleated
           from the costmap when attampting to clear space in the map. -->
      <param name="conservative_reset_dist" value="3.0"/>

      <rosparam param="recovery_behaviors">
        [
        {name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery},
        {name: rotate_recovery, type: rotate_recovery/RotateRecovery},
        {name: backup_recovery, type: backup_recovery/BackupRecovery},
        {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}
        ]
      </rosparam>

      <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/costmap_common_params.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_costmap_params.yaml" command="load" />

      <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/base_local_planner_params.yaml" command="load" />

      <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/dwa_local_planner_params.yaml" command="load" />

      <rosparam file="$(find mrta_robot_controller)/param/move_base_generic/global_planner_params.yaml" command="load" />

    </node>

    <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen">
      <param name="odom_frame_id" value="$(arg robot_name)/odom" />
      <param name="base_frame_id" value="$(arg robot_name)/base_link" />
    </node>

    <node name="mrta_robot_controller" pkg="mrta_robot_controller" type="mrta_robot_controller" args="$(arg robot_name)" respawn="false" required="true" output="screen" />

  </group>
  <!-- END ROBOT -->

  <!-- FKIE master discovery -->
  <!--<node pkg="master_discovery_fkie" type="master_discovery" name="master_discovery" output="screen" />-->
  <node pkg="master_discovery_fkie" type="master_discovery" name="master_discovery" respawn="true" output="screen">
    <param name="name" value="$(arg robot_name)_master" />
  </node>

  <!-- FKIE master sync -->
  <!--<node pkg="master_sync_fkie" type="master_sync" name="master_sync" output="screen">-->
  <node pkg="master_sync_fkie" type="master_sync" name="master_sync" respawn="true" output="screen">
    <rosparam param="ignore_hosts">['robot1_master', 'robot3_master']</rosparam>
<!--    <rosparam param="sync_hosts">['stage_master', 'auctioneer_master']</rosparam>-->
<!--
    <rosparam param="ignore_nodes">
      [
       '/*fake_localization',
       '/map_server',
       '/*move_base_node',
       '/*mrta_robot_controller'
      ]
    </rosparam>
-->
  </node>

</launch>
